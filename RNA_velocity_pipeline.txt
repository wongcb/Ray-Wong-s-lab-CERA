########Spatial transcriptomic profiling of human retinoblastoma############
########created by Luozixian Wang and Raymond Wong##########################
########CERA, UNIMELB, 05/02/2024###########################################



import scanpy as sc
import anndata
from scipy import io
from scipy.sparse import coo_matrix, csr_matrix
import numpy as np
import os
import pandas as pd

# load sparse matrix:
X = io.mmread("counts.mtx")

# create anndata object
adata = anndata.AnnData(
    X=X.transpose().tocsr()
)

# load cell metadata:
cell_meta = pd.read_csv("metadata.csv")

# load gene names:
with open("gene_names.csv", 'r') as f:
    gene_names = f.read().splitlines()

# set anndata observations and index obs by barcodes, var by gene names
adata.obs = cell_meta
adata.obs.index = adata.obs['barcode']
adata.var.index = gene_names

# load dimensional reduction:
pca = pd.read_csv("pca.csv")
pca.index = adata.obs.index

# set pca and umap
adata.obsm['X_pca'] = pca.to_numpy()
adata.obsm['X_umap'] = np.vstack((adata.obs['UMAP_1'].to_numpy(), adata.obs['UMAP_2'].to_numpy())).T

# plot a UMAP colored by sampleID to test:
sc.pl.umap(adata, color=['SampleID'], frameon=False, save=True)

# save dataset as anndata format
adata.write('my_data.h5ad')

# reload dataset
adata = sc.read_h5ad('my_data.h5ad')

#create loom file
repeats="/path/to/repeats/mm10_rmsk.gtf"
transcriptome="/path/to/annoation/file/gencode.vM25.annotation.gtf"
cellranger_output="/path/to/cellranger/output/"

velocyto run10x -m $repeats \
                $cellranger_output \
                $transcriptome
                
#loadfile
import scvelo as scv
import scanpy as sc
import cellrank as cr
import numpy as np
import pandas as pd
import anndata as ad

scv.settings.verbosity = 3
scv.settings.set_figure_params('scvelo', facecolor='white', dpi=100, frameon=False)
cr.settings.verbosity = 2
adata = sc.read_h5ad('my_data.h5ad')
# load loom files for spliced/unspliced matrices for each sample:
ldata1 = scv.read('RB_retina1.loom', cache=True)
ldata2 = scv.read('RB_retina2.loom', cache=True)
ldata3 = scv.read('RB_retina3.loom', cache=True)
ldata4 = scv.read('RB_retina4.loom', cache=True)

# rename barcodes in order to merge:
barcodes = [bc.split(':')[1] for bc in ldata1.obs.index.tolist()]
barcodes = [bc[0:len(bc)-1] + '_10' for bc in barcodes]
ldata1.obs.index = barcodes
barcodes = [bc.split(':')[1] for bc in ldata2.obs.index.tolist()]
barcodes = [bc[0:len(bc)-1] + '_11' for bc in barcodes]
ldata2.obs.index = barcodes
barcodes = [bc.split(':')[1] for bc in ldata3.obs.index.tolist()]
barcodes = [bc[0:len(bc)-1] + '_9' for bc in barcodes]
ldata3.obs.index = barcodes
barcodes = [bc.split(':')[1] for bc in ldata4.obs.index.tolist()]
barcodes = [bc[0:len(bc)-1] + '_12' for bc in barcodes]
ldata4.obs.index = barcodes

# make variable names unique
ldata1.var_names_make_unique()
ldata2.var_names_make_unique()
ldata3.var_names_make_unique()
ldata4.var_names_make_unique()

# concatenate the three loom
ldata = ldata1.concatenate([ldata2, ldata3, ldata4])
# merge matrices into the original adata object
adata = scv.utils.merge(adata, ldata)
# plot umap to check
sc.pl.umap(adata, color='celltype', frameon=False, legend_loc='on data', title='', save='_celltypes.pdf')

scv.pl.proportions(adata, groupby='celltype_full')
# pre-process
scv.pp.filter_and_normalize(adata)
scv.pp.moments(adata)

# compute velocity
scv.tl.velocity(adata, mode='stochastic')
scv.tl.velocity_graph(adata)

#visulization
scv.pl.velocity_embedding(adata, basis='umap', frameon=False, save='embedding.pdf')
scv.pl.velocity_embedding_grid(adata, basis='umap', color='new.cluster.ids', save='embedding_grid.pdf', title='', scale=0.25)
scv.pl.velocity_embedding_stream(adata, basis='umap', color='new.cluster.ids', save='embedding_stream.pdf', title='')

# plot velocity of a selected gene
#for example RB1 gene
scv.pl.velocity(adata, var_names=['RB1'], color='new.cluster.ids')

#detect variable genes -- similar to seurat pipline
scv.tl.rank_velocity_genes(adata, groupby='new.cluster.ids', min_corr=.3)
df = scv.DataFrame(adata.uns['rank_velocity_genes']['names'])
df.head()

#plot variable genes
kwargs = dict(frameon=False, size=10, linewidth=1.5, add_outline='1, 2, 5, 7')
scv.pl.scatter(adata, df['1'][:5], ylabel='Cluster 1', frameon=False, color='new.cluster.ids', size=10, linewidth=1.5)
scv.pl.scatter(adata, df['2'][:5], ylabel='Cluster 2', frameon=False, color='new.cluster.ids', size=10, linewidth=1.5)
scv.pl.scatter(adata, df['5'][:5], ylabel='Cluster 5', frameon=False, color='new.cluster.ids', size=10, linewidth=1.5)
scv.pl.scatter(adata, df['7'][:5], ylabel='Cluster 7', frameon=False, color='new.cluster.ids', size=10, linewidth=1.5)

#Confidence test
scv.tl.velocity_confidence(adata)
keys = 'velocity_length', 'velocity_confidence'
scv.pl.scatter(adata, c=keys, cmap='coolwarm', perc=[5, 95])
#table
df = adata.obs.groupby('new.cluster.ids')[keys].mean().T
df.style.background_gradient(cmap='coolwarm', axis=1)

#cell to cell transition
scv.pl.velocity_graph(adata, threshold=.1, color='new.cluster.ids')

#save adata, save adata.obs
adata.write('RNA_velocity.h5ad')
data = (adata.obs)
data.to_csv('CellID.csv)
#cell 20 is a spot in cluster 0 with 1293 genes sequenced
x, y = scv.utils.get_cell_transitions(adata, basis='umap', starting_cell=20)
ax = scv.pl.velocity_graph(adata, c='lightgrey', edge_width=.05, show=False)
ax = scv.pl.scatter(adata, x=x, y=y, s=120, c='ascending', cmap='gnuplot', ax=ax)

#pseudotime
scv.tl.velocity_pseudotime(adata)
scv.pl.scatter(adata, color='velocity_pseudotime', cmap='gnuplot')

#PAGA velocity plot
adata.uns['neighbors']['distances'] = adata.obsp['distances']
adata.uns['neighbors']['connectivities'] = adata.obsp['connectivities']
scv.tl.paga(adata, groups='new.cluster.ids')

#*original code:
#/home/zach/anaconda3/lib/python3.9/site-packages/scvelo/core/_anndata.py
#line207:
### pd.set_option('precision', precision)
#now change to 
#line 207:
#* pd.options.display.precision=3
#key change
df = scv.get_df(adata, 'paga/transitions_confidence').T
df.style.background_gradient(cmap='Blues').format('{:.2g}')
running PAGA using priors: ['velocity_pseudotime']
    finished (0:00:04) --> added
    'paga/connectivities', connectivities adjacency (adata.uns)
    'paga/connectivities_tree', connectivities subtree (adata.uns)
    'paga/transitions_confidence', velocity transitions (adata.uns)
scv.pl.paga(adata, basis='umap', size=50, alpha=.1,
            min_edge_width=2, node_size_scale=1.5)
    
#plot    
scv.pl.paga(adata, basis='umap', size=50, alpha=.1, min_edge_width=2, node_size_scale=1.5)

#currently, don't know how to save all df date upstream

#Velocities in cycling progenitors
scv.tl.score_genes_cell_cycle(adata)
scv.pl.scatter(adata, color_gradients=['S_score', 'G2M_score'], smooth=True, perc=[5, 95])
s_genes, g2m_genes = scv.utils.get_phase_marker_genes(adata)
s_genes = scv.get_df(adata[:, s_genes], 'spearmans_score', sort_values=True).index
g2m_genes = scv.get_df(adata[:, g2m_genes], 'spearmans_score', sort_values=True).index
kwargs = dict(frameon=False, ylabel='cell cycle genes')
scv.pl.scatter(adata, list(s_genes[:2]) + list(g2m_genes[:3]), **kwargs)
#PRIM1,CKAP2,CKAP2L
scv.pl.velocity(adata, ['PRIM1', 'CKAP2', 'CKAP2L'], ncols=2, add_outline=True)

##Dynamical Modeling
scv.tl.recover_dynamics(adata)
scv.tl.velocity(adata, mode='dynamical')
scv.tl.velocity_graph(adata)
scv.pl.velocity_embedding_stream(adata_subset, basis='umap', color=['celltype', 'condition'], save='embedding_stream.pdf', title='')

#check the rates of RNA transcription, splicing and degradation
df = adata.var
df = df[(df['fit_likelihood'] > .1) & df['velocity_genes'] == True]
kwargs = dict(xscale='log', fontsize=16)
with scv.GridSpec(ncols=3) as pl:
    pl.hist(df['fit_alpha'], xlabel='transcription rate', **kwargs)
    pl.hist(df['fit_beta'] * df['fit_scaling'], xlabel='splicing rate', xticks=[.1, .4, 1], **kwargs)
    pl.hist(df['fit_gamma'], xlabel='degradation rate', xticks=[.1, .4, 1], **kwargs)
scv.get_df(adata, 'fit*', dropna=True).head()

#compute latent time
scv.tl.latent_time(adata)
scv.pl.scatter(adata, color='latent_time', color_map='gnuplot', size=80)
top_genes = adata.var['fit_likelihood'].sort_values(ascending=False).index[:300]
scv.pl.heatmap(adata, var_names=top_genes, sortby='latent_time', col_color='new.cluster.ids', n_convolve=100)

#top-likelihood genes
top_genes = adata.var['fit_likelihood'].sort_values(ascending=False).index
scv.pl.scatter(adata, color='new.cluster.ids', basis=top_genes[:15], ncols=5, frameon=False)
var_names = ['TNFRSF4', 'AL109811.1', 'PLOD1', 'HNRNPR', 'SRRM1']
scv.pl.scatter(adata, var_names, color='new.cluster.ids', frameon=False)
scv.pl.scatter(adata, x='latent_time', y=var_names, color='new.cluster.ids', frameon=False)
scv.tl.rank_dynamical_genes(adata, groupby='new.cluster.ids')
df = scv.get_df(adata, 'rank_dynamical_genes/names')
df.head(5)
for cluster in ['Ductal', 'Ngn3 high EP', 'Pre-endocrine', 'Beta']:
    scv.pl.scatter(adata, df[cluster][:5], ylabel=cluster, frameon=False)
scv.pl.scatter(adata, df['0'][:5], ylabel=cluster, frameon=False, save='toplikelihoodgene_cluster0.pdf')
scv.pl.scatter(adata, df['1'][:5], ylabel=cluster, frameon=False, save='toplikelihoodgene_cluster1.pdf')
scv.pl.scatter(adata, df['2'][:5], ylabel=cluster, frameon=False, save='toplikelihoodgene_cluster2.pdf')
scv.pl.scatter(adata, df['3'][:5], ylabel=cluster, frameon=False, save='toplikelihoodgene_cluster3.pdf')
scv.pl.scatter(adata, df['4'][:5], ylabel=cluster, frameon=False, save='toplikelihoodgene_cluster4.pdf')
scv.pl.scatter(adata, df['5'][:5], ylabel=cluster, frameon=False, save='toplikelihoodgene_cluster5.pdf')
scv.pl.scatter(adata, df['6'][:5], ylabel=cluster, frameon=False, save='toplikelihoodgene_cluster6.pdf')
scv.pl.scatter(adata, df['7'][:5], ylabel=cluster, frameon=False, save='toplikelihoodgene_cluster7.pdf')
scv.pl.scatter(adata, df['8'][:5], ylabel=cluster, frameon=False, save='toplikelihoodgene_cluster8.pdf')
scv.pl.scatter(adata, df['9'][:5], ylabel=cluster, frameon=False, save='toplikelihoodgene_cluster9.pdf')

##differential kinetic test
#use asymptotic chi-squared distribution test the significance of likelihood ratio
var_names = ['RPLP2', 'MALAT1', 'FAU']
scv.tl.differential_kinetic_test(adata, var_names=var_names, groupby='new.cluster.ids')
scv.get_df(adata[:, var_names], ['fit_diff_kinetics', 'fit_pval_kinetics'], precision=2)
kwargs = dict(linewidth=2, add_linfit=True, frameon=False)
scv.pl.scatter(adata, basis=var_names, add_outline='fit_diff_kinetics', **kwargs)
diff_clusters=list(adata[:, var_names].var['fit_diff_kinetics'])
scv.pl.scatter(adata, legend_loc='right', size=60, title='diff kinetics',
               add_outline=diff_clusters, outline_width=(.8, .2))
#top likelihood gene
scv.tl.recover_dynamics(adata)
top_genes = adata.var['fit_likelihood'].sort_values(ascending=False).index[:100]
scv.tl.differential_kinetic_test(adata, var_names=top_genes, groupby='clusters')
scv.pl.scatter(adata, basis=top_genes[:15], ncols=5, add_outline='fit_diff_kinetics', **kwargs)
scv.pl.scatter(adata, basis=top_genes[15:30], ncols=5, add_outline='fit_diff_kinetics', **kwargs)


##Recompute velocities
scv.tl.velocity(adata, diff_kinetics=True)
scv.tl.velocity_graph(adata)
scv.pl.velocity_embedding(adata, dpi=120, arrow_size=2, arrow_length=2)


##part2: analyse specific clusters
#subset the dataset
cur_celltypes = ['1', '2', '5', '7']
adata_subset = adata[adata.obs['new.cluster.ids'].isin(cur_celltypes)]
sc.pl.umap(adata_subset, color='new.cluster.ids', frameon=False, title=['', ''])

#cluster1,2,5,7
sc.pp.neighbors(adata_subset, n_neighbors=15, use_rep='X_pca')
# pre-process
scv.pp.filter_and_normalize(adata_subset)
scv.pp.moments(adata_subset)
#analysis
scv.tl.recover_dynamics(adata)
##this part is only for subsets


##start codes
#loadfile
import scvelo as scv
import scanpy as sc
import cellrank as cr
import numpy as np
import pandas as pd
import anndata as ad
adata = sc.read_h5ad('RNA_velocity.h5ad')

##save data
adata.write('RNA_velocity.h5ad')
data = (adata.obs)
data.to_csv('CellID.csv)






